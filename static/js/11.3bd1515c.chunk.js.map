{"version":3,"sources":["components/Contact/EmailLink.js","pages/Contact.js"],"names":["validateText","text","test","length","messages","EmailLink","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","href","Contact","Main","title","description","data-testid","to","ContactIcons"],"mappings":"uKAGMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,QAGzBC,EAAW,CACf,KACA,QACA,OACA,OACA,eACA,KACA,UACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,SA8DaC,EAzCG,WAChB,IAGA,EAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAiCF,mBAASF,EAASG,IAAnD,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA2BJ,mBAASF,EAASG,GAAKJ,QAAlD,mBAAOQ,EAAP,KAAaC,EAAb,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAkBA,OA3CkB,SAACC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,YACbJ,GACH,OAAO,kBAAMO,cAAcF,IAE7B,OAAO,eACN,CAACL,IAYJQ,EAAY,WACV,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAXO,IAWQP,EAASG,GAAKJ,SAC/BsB,GAAU,EACVC,EAAU,GAERD,IAAWrB,EAASD,OACtBW,GAAY,IAEZJ,EAAcN,EAASqB,GAAQE,MAAM,EAAGD,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,MAEtBb,EArBW,GAqBQ,MAGpB,qBACEe,UAAU,mBACVC,MAAO7B,EAAaS,GAAW,GAAK,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,IAChCkB,aAAc,kBAAOzB,EAAMH,EAASD,QAAWW,GAAY,IAJ7D,SAME,oBAAGmB,KAAMjC,EAAaS,GAAW,sCAAwC,GAAzE,UAEE,+BAAOA,IACP,8D,QCxDOyB,UApBC,kBACd,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,YAAY,kEAFd,SAIE,0BAAST,UAAU,OAAOP,GAAG,UAA7B,UACE,iCACE,qBAAKO,UAAU,QAAf,SACE,oBAAIU,cAAY,UAAhB,SAA0B,cAAC,IAAD,CAAMC,GAAG,WAAT,2BAG9B,sBAAKX,UAAU,WAAf,UACE,iFACA,cAAC,EAAD,OAEF,cAACY,EAAA,EAAD","file":"static/js/11.3bd1515c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'hi',\n  'hello',\n  'hola',\n  'Ahoj',\n  'dobrÃ½ den',\n  'oi',\n  'bonjour',\n  'you-can-email-me-at-literally-anything! Really',\n  'well, not anything. But most things',\n  'like-this',\n  'or-this',\n  'but not this :(  ',\n  'you.can.also.email.me.with.specific.topics.like',\n  'just-saying-hi',\n  'please-work-for-us',\n  'help',\n  'admin',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = () => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      setIsActive(false);\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <a href={validateText(message) ? 'mailto:brandon.donelan@outlook.com ' : ''}>\n        {/* <a href={validateText(message) ? `mailto:${message}@brandon-donelan.com ` : ''}> */}\n        <span>{message}</span>\n        <span>@brandon-donelan.com</span>\n      </a>\n    </div>\n  );\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Brandon Donelan via email @ brandon.donelan@outlook.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>Feel free to get in touch. You can email me at: </p>\n        <EmailLink />\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"sourceRoot":""}